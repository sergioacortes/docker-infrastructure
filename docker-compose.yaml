name: infrastructure

services:
# Persistence and Messaging
  redis:
    container_name: redis
    image: redis:latest
    profiles: 
      - "infrastructure"
    restart: always
    environment:
      - ALLOW_EMPTY_PASSWORD=yes
    volumes:
        - redis_data:/data
    ports:
      - 6379:6379
    networks:
      - localnet

  rabbitmq:
    container_name: rabbitmq
    image: rabbitmq:3.13.7-management
    profiles: 
      - "infrastructure-messaging"
    command: rabbitmq-server
    restart: always
    hostname: rabbitmq
    volumes:
        - .\rabbitmq\rabbitmq.conf:/etc/rabbitmq/rabbitmq.conf:ro
        - .\rabbitmq\definitions.json:/etc/rabbitmq/definitions.json:ro
        - rabbitmq_lib:/var/lib/rabbitmq
        - rabbitmq_log:/var/log/rabbitmq
    environment:
      RABBITMQ_USERNAME: app
      RABBITMQ_DEFAULT_USER: app
      RABBITMQ_PASSOWRD: ${PASSWORD}
      RABBITMQ_DEFAULT_PASS: ${PASSWORD}
      RABBITMQ_VHOST: /
    ports:
      - 5672:5672
      - 15672:15672
    networks:
      - localnet

  mssql:
    image: mcr.microsoft.com/mssql/server:2022-latest
    profiles:
      - "infrastructure-microsoft"
    container_name: mssql
    hostname: mssql
    restart: always
    user: root
    ports:
      - 14330:1433
    environment:
      ACCEPT_EULA: Y
      MSSQL_SA_PASSWORD: ${PASSWORD}
      MSSQL_PID: Standard
      MSSQL_BACKUP_DIR: /var/opt/mssql/backups
      MSSQL_LCID: 1033
      TZ: Etc/UTC
    volumes:
      - ./mssql/backups:/var/opt/mssql/backups
      - ./mssql/data:/var/opt/mssql/data
      - ./mssql/log:/var/opt/mssql/log
    networks:
      localnet:
        aliases:
          - "mssql"
  azurite:
    container_name: azurite
    image: mcr.microsoft.com/azure-storage/azurite:latest
    profiles:
      - "infrastructure-microsoft"
    hostname: azurite
    restart: always
    command: azurite --loose -l /data --blobHost 0.0.0.0 --queueHost 0.0.0.0 --tableHost 0.0.0.0
    volumes:
      - azurite_data:/data
    ports:
      - 10000:10000
      - 10001:10001
      - 10002:10002
    networks:
      - localnet

  mongodb:
    container_name: mongodb
    image: mongo:8.0.12
    profiles:
      - "infrastructure-mongodb"
    command: >
      bash -c "
        mongod --replSet rs-local --bind_ip_all --port 27017 --fork --logpath /var/log/mongodb.log &&
        until mongosh --eval 'print(\"MongoDB estÃ¡ listo\")' > /dev/null 2>&1; do sleep 2; done &&
        mongosh --eval '
          try {
            rs.status();
            print(\"Replica set ya inicializado\");
          } catch (e) {
            rs.initiate({
              _id: \"rs-local\",
              members: [
                { _id: 0, host: \"mongodb:27017\" }
              ]
            });
            print(\"Replica set rs-local inicializado\");
          }
        ' &&
        tail -f /var/log/mongodb.log
      "
    restart: always
    volumes:
      - mongodb_data:/data/db
      - mongodb_config:/data/configdb
    environment:
      MONGO_INITDB_DATABASE: Sample
    ports:
      - 27017:27017
    networks:
      - localnet

# Monitoring
  otel-collector:
    container_name: otel-collector
    image: otel/opentelemetry-collector-contrib:0.137.0
    profiles: 
      - "infrastructure-monitoring"
    command: [ "--config=/etc/otel-collector-config.yaml" ]
    restart: no
    volumes:
      - ./monitoring/otel-collector/otel-collector-config.yaml:/etc/otel-collector-config.yaml
      - otelcollector_log:/etc/output:rw # Store the logs
    ports:
      - "8890:8890"   # Prometheus metrics exposed by the collector
      - "4317:4317"   # OTLP gRPC receiver
      - "4318:4318"   # OTLP HTTP receiverz
      - "1333:1333"   # HealtCheck
    networks:
      - localnet

  prometheus:
    container_name: prometheus
    image: prom/prometheus:v3.6.0
    profiles: 
      - "infrastructure-monitoring"
    restart: no
    volumes:
      - ./monitoring/prometheus/prometheus.yaml:/etc/prometheus/prometheus.yml
    ports:
      - "9091:9090"
    networks:
      - localnet

  tempo:
    container_name: tempo
    image: grafana/tempo:2.8.2
    profiles: 
      - "infrastructure-monitoring"
    command: ["-config.file=/etc/tempo.yaml"]
    restart: no
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./monitoring/tempo/tempo.yaml:/etc/tempo.yaml
    ports:
      - 3200:3200  # tempo
      - 4007:4317  # otlp grpc
      - 4008:4318  # otlp http
    networks:
      - localnet

  grafana:
    container_name: grafana
    image: grafana/grafana:12.2.0
    profiles: 
      - "infrastructure-monitoring"
    restart: no
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
    volumes:
      - /etc/localtime:/etc/localtime:ro
      - ./monitoring/grafana/grafana.ini:/etc/grafana/grafana.ini
      - ./monitoring/grafana/provisioning/datasources:/etc/grafana/provisioning/datasources
    ports:
      - 3000:3000
    networks:
      - localnet

  loki:
    container_name: loki
    image: grafana/loki:3.5.5
    profiles: 
      - "infrastructure-monitoring"
    command: -config.file=/etc/loki/local-config.yaml
    restart: no
    volumes:
      - /etc/localtime:/etc/localtime:ro      
      - ./monitoring/loki/loki.yaml:/etc/loki/local-config.yaml
    ports:
      - 3100:3100
    networks:
      - localnet

networks:
  localnet:    
    driver: bridge

volumes:
  redis_data:
  rabbitmq_lib:
  rabbitmq_log:
  mongodb_data:
  mongodb_config:
  azurite_data:
  otelcollector_log:
